AWSTemplateFormatVersion: 2010-09-09

# https://s3.amazonaws.com/cloudformation.jsonize.com/job-dispatch.yaml

Description: Resources for setting up a SNS topic to launch Fargate or Lambda


Parameters:

  TopicName:
    Type: String
    Description: The SNS topic name

  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Cluster security group

  ClusterSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets of cluster

  ClusterName:
    Type: String
    Description: Name of target cluster

  JobTypes:
    Type: String
    Description: Job Types


Resources:

  SnsToLambda:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - LambdaFunction
    Properties:
      TemplateURL: https://s3.amazonaws.com/cloudformation.jsonize.com/sns-to-lambda.yaml
      Parameters:
        TopicName: !Ref TopicName
        LambdaFunctionArn: !GetAtt LambdaFunction.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - arn:aws:logs:*:*:*
        - PolicyName: ecs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                  - iam:PassRole
                Resource:
                  - '*'

  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaRole
    Properties:
      Code:
        ZipFile: |
          {{file-read file:./lambda.js indent:true}}
      Environment:
        Variables:
          JOB_TYPES: !Ref JobTypes
          CLUSTER: !Ref ClusterName
          SECURITYGROUP: !Ref ClusterSecurityGroup
          SUBNETS: !Join [ ",", !Ref ClusterSubnets]
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs16.x
      Timeout: 600

  LambdaSNSPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - LambdaFunction
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com


Outputs:

  SnsTopicName:
    Description: The name of the sns topic
    Value:
      Fn::GetAtt: [SnsToLambda, Outputs.SnsTopicName]

