AWSTemplateFormatVersion: 2010-09-09

# https://s3.amazonaws.com/cloudformation.jsonize.com/route53-redirect-domain.yaml


Description: >
  Redirect one hostname (apex or a single subdomain) under ZoneDomain to TargetDomain using
  Route53 + CloudFront (301 via CloudFront Function) and a placeholder S3 origin.

Parameters:
  AcmCertificateArn:
    Type: String
    Description: The ARN of the SSL certificate to use for the CloudFront distribution.
  ZoneDomain:
    Type: String
    Description: The zone domain for the resource
  SubDomain:
    Type: String
    Description: Single subdomain to redirect; use empty string "" for the apex
  TargetDomain:
    Type: String
    Description: The target domain to redirect to, including protocol (e.g. https://example.com)

Mappings:
  CloudFront:
    HostedZoneId:
      Global: Z2FDTNDATAQYW2
  ManagedPolicies:
    Cache:
      # AWS managed "CachingDisabled" policy ID
      CachingDisabled: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad

Conditions:
  IsApex: !Equals [ !Ref SubDomain, '' ]

Resources:

  RedirectHoldingBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  RedirectFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub redirect-to-target-${AWS::StackName}
      AutoPublish: true
      FunctionConfig:
        Comment: Issue 301 to TargetDomain while preserving path and query string
        Runtime: cloudfront-js-2.0
      FunctionCode: !Sub |
        function handler(event) {
          var req = event.request;
          var uri = req.uri || "/";
          var qs = "";
          if (req.querystring && Object.keys(req.querystring).length > 0) {
            var parts = [];
            for (var k in req.querystring) {
              if (!req.querystring.hasOwnProperty(k)) continue;
              var item = req.querystring[k];
              if (item && typeof item.value !== "undefined") {
                parts.push(encodeURIComponent(k) + "=" + encodeURIComponent(item.value));
              }
            }
            if (parts.length > 0) qs = "?" + parts.join("&");
          }
          var location = "${TargetDomain}" + uri + qs;
          return {
            statusCode: 301,
            statusDescription: "Moved Permanently",
            headers: {
              "location": { value: location },
              "cache-control": { value: "max-age=3600" }
            }
          };
        }

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub Redirect ${ZoneDomain} host to ${TargetDomain}
        HttpVersion: http2
        PriceClass: PriceClass_100
        Aliases:
          - !If
            - IsApex
            - !Ref ZoneDomain
            - !Sub "${SubDomain}.${ZoneDomain}"
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        DefaultCacheBehavior:
          TargetOriginId: s3-origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          Compress: true
          # <-- This satisfies the API requirement instead of legacy ForwardedValues
          CachePolicyId: !FindInMap [ ManagedPolicies, Cache, CachingDisabled ]
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt RedirectFunction.FunctionMetadata.FunctionARN
        Origins:
          - Id: s3-origin
            # Use the bucket's RegionalDomainName for S3 origins
            DomainName: !GetAtt RedirectHoldingBucket.RegionalDomainName
            S3OriginConfig: {}

  ARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${ZoneDomain}."
      Name: !If
        - IsApex
        - !Ref ZoneDomain
        - !Sub "${SubDomain}.${ZoneDomain}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: !FindInMap [ CloudFront, HostedZoneId, Global ]

  AAAARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${ZoneDomain}."
      Name: !If
        - IsApex
        - !Ref ZoneDomain
        - !Sub "${SubDomain}.${ZoneDomain}"
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: !FindInMap [ CloudFront, HostedZoneId, Global ]

Outputs:
  DistributionDomainName:
    Description: CloudFront distribution domain name
    Value: !GetAtt Distribution.DomainName
  RedirectHostname:
    Description: Hostname being redirected
    Value: !If
      - IsApex
      - !Ref ZoneDomain
      - !Sub "${SubDomain}.${ZoneDomain}"
  TargetDomainEcho:
    Description: The destination all requests are redirected to
    Value: !Ref TargetDomain
