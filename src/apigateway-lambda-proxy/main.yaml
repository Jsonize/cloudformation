AWSTemplateFormatVersion: 2010-09-09

# https://s3.amazonaws.com/cloudformation.jsonize.com/apigateway-lambda-proxy.yaml

Description: Resources for setting up an api gateway with a lambda proxy backend.


Parameters:

  CertificateArn:
    Type: String
    Description: The arn of the SSL certificate

  ZoneDomain:
    Type: String
    Description: The zone domain for the resource

  SubDomain:
    Type: String
    Description: The sub domain for the resource

  ResourceName:
    Type: String
    Description: The resource name

  LambdaFunctionArn:
    Type: String
    Description: The lambda function arn


Resources:

  ApiGatewayApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      BinaryMediaTypes:
        - multipart/form-data
        - application/octet-stream
        - application/pdf
        - application/force-download
        - application/zip
      Body:
        swagger: 2.0
        info:
          title: !Ref ResourceName
        basePath: /production
        schemes:
          - https
        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
                - application/json
              parameters:
                - name: proxy
                  in: path
                  required: true
                  type: string
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Join ["", ["arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !Ref LambdaFunctionArn, "/invocations" ] ]
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
        definitions:
          Empty:
            type: object
            title: Empty Schema

  LambdaApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join ["", [ "arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !Ref ApiGatewayApi, "/*/*" ] ]

  ApiGatewayApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Join [ ".", [ !Ref SubDomain, !Ref ZoneDomain ] ]
      CertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - EDGE

  ApiGatewayApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayApi
    Properties:
      RestApiId: !Ref ApiGatewayApi

  ApiGatewayApiStage:
    Type: AWS::ApiGateway::Stage
    DependsOn:
      - ApiGatewayApi
      - ApiGatewayApiDeployment
    Properties:
      RestApiId: !Ref ApiGatewayApi
      DeploymentId: !Ref ApiGatewayApiDeployment
      StageName: production

  ApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - ApiGatewayApi
      - ApiGatewayApiStage
      - ApiGatewayApiDomainName
    Properties:
      RestApiId: !Ref ApiGatewayApi
      DomainName: !Join [ ".", [ !Ref SubDomain, !Ref ZoneDomain ] ]
      Stage: !Ref ApiGatewayApiStage

  ApiGatewayRoute53:
    Type: AWS::Route53::RecordSet
    DependsOn:
      - ApiGatewayApiDomainName
    Properties:
      HostedZoneName: !Join [ "", [ !Ref ZoneDomain, "." ] ]
      Name: !Join [ ".", [ !Ref SubDomain, !Ref ZoneDomain ] ]
      TTL: 300
      ResourceRecords:
        - !GetAtt ApiGatewayApiDomainName.DistributionDomainName
      Type: CNAME