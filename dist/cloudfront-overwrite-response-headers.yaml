AWSTemplateFormatVersion: 2010-09-09

# https://s3.amazonaws.com/cloudformation.jsonize.com/cloudfront-overwrite-response-headers.yaml

Description: Resources for dynamically overwriting cloudfront response headers



Parameters:

  RouteBasedHeaders:
    Type: String
    Description: Route based headers


Resources:

  EdgeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

  EdgeLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          exports.handler = (event, context, callback) => {
              const request = event.Records[0].cf.request;
              const response = event.Records[0].cf.response;
              const headers = response.headers;
          
              const rbh = JSON.parse('${RouteBasedHeaders}');
          
              // Example: [{"match":{"uri":".*mp4$"},"headers":{"Content-Type":"video/mp4"}},{"match":{"uri":".*aac$"},"headers":{"Content-Type":"audio/aac"}},{"match":{"uri":".*jpg$"},"headers":{"Content-Type":"image/jpeg"}},{"match":{"querystring":".*download=true.*","uri":".*mp4$"},"headers":{"Content-Disposition":"attachment;filename=\\"video.mp4\\""}},{"match":{"querystring":".*download=true.*","uri":".*aac$"},"headers":{"Content-Disposition":"attachment;filename=\\"audio.aac\\""}},{"match":{"querystring":".*download=true.*","uri":".*jpg$"},"headers":{"Content-Disposition":"attachment;filename=\\"poster.jpg\\""}}]
              rbh.forEach(item => {
                  let isMatch = true;
                  for (let headerKey in item.match) {
                      const headerValue = item.match[headerKey];
                      const regExp = new RegExp(headerValue);
                      const testValue = request[headerKey];
                      isMatch = isMatch && regExp.test(testValue);
                  }
                  if (isMatch) {
                      for (let headerKey in item.headers) {
                          const headerValue = item.headers[headerKey];
                          headers[headerKey.toLowerCase()] = [{key: headerKey, value: headerValue}];
                      }
                  }
              });
          
              callback(null, response);
          };
      Handler: index.handler
      Role: !GetAtt EdgeLambdaRole.Arn
      Runtime: nodejs16.x
      Timeout: 5

  EdgeLambdaVersion:
    Type: AWS::Lambda::Version
    DependsOn:
      - EdgeLambda
    Properties:
      FunctionName: !GetAtt EdgeLambda.Arn


Outputs:

  EdgeLambdaArn:
    Description: The arn of the Edge lambda
    Value: !GetAtt EdgeLambda.Arn
