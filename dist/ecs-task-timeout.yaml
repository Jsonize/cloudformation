AWSTemplateFormatVersion: 2010-09-09

# https://s3.amazonaws.com/cloudformation.jsonize.com/ecs-task-timeout.yaml

Description: Automatically timeout ECS tasks.


Parameters:

  ClusterName:
    Type: String
    Description: Name of target cluster

  ScheduleExpression:
    Type: String
    Description: Schedule expression, e.g. 'rate(6 hours)'
    Default: rate(15 minutes)

Resources:

  ECSTaskTimeoutLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - arn:aws:logs:*:*:*
        - PolicyName: ecs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:*
                Resource:
                  - "*"

  ECSTaskTimeoutLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - ECSTaskTimeoutLambdaRole
    Properties:
      Code:
        ZipFile: |
          const aws = require('aws-sdk');
          const ecs = new aws.ECS({apiVersion: '2014-11-13'});
          const cloudwatchlogs = new aws.CloudWatchLogs({apiVersion: '2014-03-28'});
          
          const lookup = function (arr, key) {
              for (var i = 0; i < arr.length; ++i)
                  if (arr[i].key === key)
                      return arr[i].value;
              return undefined;
          };
          
          exports.handler = (event, context, callback) => {
              const cluster = process.env.CLUSTER_NAME;
              console.log(cluster);
              ecs.listTasks({
                  cluster: cluster
              }, function (err, listTasksData) {
                  if (err) {
                      console.log(err);
                      return;
                  }
                  ecs.describeTasks({
                      cluster: cluster,
                      tasks: listTasksData.taskArns
                  }, function (err, describeTasksData) {
                      if (err) {
                          console.log(err);
                          return;
                      }
                      describeTasksData.tasks.forEach(function (task) {
                          ecs.listTagsForResource({
                              resourceArn: task.taskDefinitionArn
                          }, function(err, taskTagData) {
                              if (err)
                                  return;
                              const startTime = (new Date(task.createdAt)).getTime();
                              const currentTime = (new Date()).getTime();
                              const deltaTime = currentTime - startTime;
                              var taskTimeout = lookup(taskTagData.tags, "task-timeout");
                              if (taskTimeout) {
                                  taskTimeout = parseInt(taskTimeout, 10);
                                  if (deltaTime > taskTimeout) {
                                      console.log("Terminating Task", task.taskArn, "Definition", task.taskDefinitionArn, "Timeout", taskTimeout, "StartTime", startTime, "CurrentTime", currentTime, "DeltaTime", deltaTime);
                                      ecs.stopTask({
                                          task: task.taskArn,
                                          cluster: cluster
                                      }, function(err, data) {
                                          if (err)
                                              console.log(err);
                                      });
                                  }
                              }
                              var taskLogTimeout = lookup(taskTagData.tags, "task-log-timeout");
                              if (taskLogTimeout) {
                                  taskLogTimeout = parseInt(taskLogTimeout, 10);
                                  if (deltaTime > taskLogTimeout) {
                                      ecs.describeTaskDefinition({
                                          taskDefinition: task.taskDefinitionArn
                                      }, function (err, describeTaskDef) {
                                          if (err)
                                              return;
                                          const logGroup = describeTaskDef.taskDefinition.containerDefinitions[0].logConfiguration.options['awslogs-group'];
                                          const logStreamId = task.taskArn.split("/").pop();
                                          cloudwatchlogs.getLogEvents({
                                              logGroupName: logGroup,
                                              logStreamName: logGroup.substring(1) + "/" + logStreamId,
                                              limit: 1
                                          }, function(err, data) {
                                              if (err || data.events.length > 0)
                                                  return;
                                              console.log("Terminating Task", task.taskArn, "Definition", task.taskDefinitionArn, "LogTimeout", taskLogTimeout, "StartTime", startTime, "CurrentTime", currentTime, "DeltaTime", deltaTime);
                                              ecs.stopTask({
                                                  task: task.taskArn,
                                                  cluster: cluster
                                              }, function(err, data) {
                                                  if (err)
                                                      console.log(err);
                                              });
                                          });
                                      });
                                  }
                              }
                          });
                      });
                  });
              });
          };
          
      Environment:
        Variables:
          CLUSTER_NAME: !Ref ClusterName
      Handler: index.handler
      Role: !GetAtt ECSTaskTimeoutLambdaRole.Arn
      Runtime: nodejs12.x
      Timeout: 60

  ECSTaskTimeoutEventRule:
    Type: AWS::Events::Rule
    DependsOn:
      - ECSTaskTimeoutLambda
    Properties:
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Id: IdECSTaskTimeoutLambda
          Arn: !GetAtt ECSTaskTimeoutLambda.Arn

  ECSTaskTimeoutLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ECSTaskTimeoutLambda
      - ECSTaskTimeoutEventRule
    Properties:
      FunctionName: !GetAtt ECSTaskTimeoutLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ECSTaskTimeoutEventRule.Arn

