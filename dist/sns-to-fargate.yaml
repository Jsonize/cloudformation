AWSTemplateFormatVersion: 2010-09-09

# https://s3.amazonaws.com/cloudformation.jsonize.com/sns-to-fargate.yaml

Description: Resources for setting up a SNS topic to launch Fargate


Parameters:

  TopicName:
    Type: String
    Description: The SNS topic name

  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Cluster security group

  ClusterSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets of cluster

  ClusterName:
    Type: String
    Description: Name of target cluster


Resources:

  SnsToLambda:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - LambdaFunction
    Properties:
      TemplateURL: https://s3.amazonaws.com/cloudformation.jsonize.com/sns-to-lambda.yaml
      Parameters:
        TopicName: !Ref TopicName
        LambdaFunctionArn: !GetAtt LambdaFunction.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - arn:aws:logs:*:*:*
        - PolicyName: ecs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                  - iam:PassRole
                Resource:
                  - '*'

  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaRole
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ECS = new AWS.ECS({apiVersion: '2014-11-13'});
          const FS = require("fs");
          const Util = require("util");
          
          const tasks = JSON.parse(FS.readFileSync("tasks.json"));
          
          exports.handler = function (event, context, callback) {
              const message = event.Records[0].Sns.Message;
              console.log(message);
              const splt = message.split(":");
              const taskName = splt.shift();
              const task = tasks[taskName];
              var commandLine = task.commandLine;
              splt.forEach(function (s, i) {
                  //commandLine = commandLine.replace("${" + i + "}", s);
                  commandLine = commandLine.map(function (t) {
                      return t.replace("${" + i + "}", s);
                  });
              });
              var params = {
                  cluster: process.env["CLUSTER"],
                  taskDefinition: task.taskDefinition,
                  overrides: {
                      containerOverrides: [{
                          command: commandLine,
                          name: task.containerName
                      }]
                  },
                  launchType: 'FARGATE',
                  platformVersion: 'LATEST',
                  networkConfiguration: {
                      awsvpcConfiguration: {
                          assignPublicIp: "ENABLED",
                          securityGroups: [process.env["SECURITYGROUP"]],
                          subnets: process.env["SUBNETS"].split(",")
                      }
                  }
              };
              console.log(Util.inspect(params, false, null, true /* enable colors */));
              ECS.runTask(params, function (err, data) {
                  console.log(err);
                  callback(null, "Success");
              });
          };
          
      Environment:
        Variables:
          CLUSTER: !Ref ClusterName
          SECURITYGROUP: !Ref ClusterSecurityGroup
          SUBNETS: !Join [ ",", !Ref ClusterSubnets]
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs12.x
      Timeout: 60
