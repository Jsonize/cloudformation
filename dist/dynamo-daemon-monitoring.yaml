AWSTemplateFormatVersion: 2010-09-09

# https://s3.amazonaws.com/cloudformation.jsonize.com/dynamo-daemon-monitoring.yaml

Description: Monitor daemons via DynamoDB and CloudWatch Alarms


Parameters:

  DynamoDataTable:
    Type: String
    Description: The name of the monitoring data table
    Default: daemon-monitoring-records

  DynamoConfigTable:
    Type: String
    Description: The name of the monitoring config table
    Default: daemon-monitoring-config

  AlarmSNSTopic:
    Type: String
    Description: The SNS topic ARN that should be used for alarms

  ScheduleExpression:
    Type: String
    Description: Schedule expression, e.g. 'rate(6 hours)'
    Default: rate(15 minutes)


Resources:

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - arn:aws:logs:*:*:*
        - PolicyName: dynamo
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:CreateTable
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource:
                  - !Join [ "", [ "arn:aws:dynamodb:*:*:table/", !Ref DynamoDataTable ] ]
                  - !Join [ "", [ "arn:aws:dynamodb:*:*:table/", !Ref DynamoConfigTable ] ]
        - PolicyName: sns
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref AlarmSNSTopic

  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaRole
    Properties:
      Code:
        ZipFile: |
          _B=None
          _A='date'
          import boto3,os
          from botocore.exceptions import ClientError
          from boto3.dynamodb.conditions import Key
          import re,datetime,json
          def parseDuration(s):B={'second':1,'minute':60,'hour':3600,'day':86400,'week':604800,'month':2592000};A=re.compile('(\\d+)\\s+([a-z]+[^s])s?').match(s);return int(A.group(1))*B[A.group(2)]
          def parseLastInvocation(s):
          	A=re.compile('rate\\((.*)\\)').match(s)
          	if A!=_B:return datetime.datetime.now()-datetime.timedelta(seconds=parseDuration(A.group(1)))
          	B=re.compile('cron\\((.*)\\)').match(s)
          	if B!=_B:return
          def log(s):print(s)
          def getTable(db,name,hashKey,rangeKey=_B):
          	F='AttributeType';E='KeyType';B=hashKey;A='AttributeName'
          	try:
          		C=[{A:B,E:'HASH'}];D=[{A:B,F:'S'}]
          		if rangeKey!=_B:C.append({A:_A,E:'RANGE'});D.append({A:_A,F:'S'})
          		return db.create_table(TableName=name,KeySchema=C,AttributeDefinitions=D,BillingMode='PAY_PER_REQUEST')
          	except ClientError:return db.Table(name)
          def handler(event,context):
          	e='timeout';d='sortkey';c='contexts';b='enabled';a='LastEvaluatedKey';V='ALARM ';U='success';T='invocation';S='context';R='state';Q='Items';N=': ';M='default';L='daemonName';K=' ';J='pending';H=context;W=boto3.resource('dynamodb');f=boto3.client('sns');g=getTable(W,os.environ['DYNAMO_DATA_TABLE'],L,_A);X=getTable(W,os.environ['DYNAMO_CONFIG_TABLE'],L);h=os.environ['SNS_TOPIC'];I=X.scan();Y=I[Q]
          	while a in I:I=X.scan(ExclusiveStartKey=I[a]);Y.extend(I[Q])
          	for C in Y:
          		if b in C and not C[b]:continue
          		log(C);F=C[L];i=C['minInvocations'];j=parseDuration(C['thresholdStart']);k=parseDuration(C['timeoutEnd']);Z=parseLastInvocation(C['schedule']);l=g.query(KeyConditionExpression=Key(L).eq(F)&Key(_A).gte(Z.isoformat()));B={}
          		if c in C:
          			for E in C[c]:B[E]={}
          		else:B[M]={}
          		O=l[Q]
          		for A in O:A[_A]=A[_A].split('~',1)[0];A[d]=A[_A]+'~'+A[R]
          		O.sort(key=lambda x:x[d])
          		for A in O:
          			if not M in B:
          				if not S in A:continue
          				if not A[S]in B:continue
          				H=B[A[S]]
          			else:H=B[M]
          			if not A[T]in H:H[A[T]]={U:0,e:0,J:_B}
          			G=H[A[T]];P=datetime.datetime.strptime(A[_A],'%Y-%m-%dT%H:%M:%S')
          			if A[R]=='start':
          				if P<=Z+datetime.timedelta(seconds=j):G[J]=P
          			if A[R]=='stop'and G[J]!=_B:
          				if P<=G[J]+datetime.timedelta(seconds=k):G[U]+=1
          				else:G[e]+=1
          				G[J]=_B
          		for(m,n)in B.items():
          			D=0
          			for(p,o)in n.items():D+=o[U]
          			B[m]=D
          		if not B:B[M]=0
          		for(E,D)in B.items():
          			log(F+K+E+N+str(D))
          			if D<i:log(V+F+K+E+N+str(D));f.publish(TopicArn=h,Message=json.dumps({'AlarmName':F+K+E,'OldStateValue':'UNKNOWN','NewStateValue':'ALARM','NewStateReason':V+F+K+E+N+str(D)}),Subject=V+F+K+E+N+str(D))
      Environment:
        Variables:
          DYNAMO_DATA_TABLE: !Ref DynamoDataTable
          DYNAMO_CONFIG_TABLE: !Ref DynamoConfigTable
          SNS_TOPIC: !Ref AlarmSNSTopic
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.12
      Timeout: 60

  ScheduledLambdaEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Id: IdScheduledLambda
          Arn: !GetAtt LambdaFunction.Arn

  ScheduledLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ScheduledLambdaEventRule
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledLambdaEventRule.Arn
