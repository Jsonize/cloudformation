AWSTemplateFormatVersion: 2010-09-09

# https://s3.amazonaws.com/cloudformation.jsonize.com/dynamo-daemon-monitoring.yaml

Description: Monitor daemons via DynamoDB and CloudWatch Alarms


Parameters:

  DynamoDataTable:
    Type: String
    Description: The name of the monitoring data table
    Default: daemon-monitoring-records

  DynamoConfigTable:
    Type: String
    Description: The name of the monitoring config table
    Default: daemon-monitoring-config

  AlarmSNSTopic:
    Type: String
    Description: The SNS topic ARN that should be used for alarms

  ScheduleExpression:
    Type: String
    Description: Schedule expression, e.g. 'rate(6 hours)'
    Default: rate(15 minutes)


Resources:

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - arn:aws:logs:*:*:*
        - PolicyName: dynamo
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:CreateTable
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource:
                  - !Join [ "", [ "arn:aws:dynamodb:*:*:table/", !Ref DynamoDataTable ] ]
                  - !Join [ "", [ "arn:aws:dynamodb:*:*:table/", !Ref DynamoConfigTable ] ]
        - PolicyName: sns
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref AlarmSNSTopic

  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaRole
    Properties:
      Code:
        ZipFile: |
          _A='date'
          import boto3,os
          from botocore.exceptions import ClientError
          from boto3.dynamodb.conditions import Key
          import re,datetime,json
          def parseDuration(s):B={'second':1,'minute':60,'hour':60*60,'day':24*60*60,'week':7*24*60*60,'month':30*24*60*60};A=re.compile('(\\d+)\\s+([a-z]+[^s])s?').match(s);return int(A.group(1))*B[A.group(2)]
          def parseLastInvocation(s):
          	A=re.compile('rate\\((.*)\\)').match(s)
          	if A!=None:return datetime.datetime.now()-datetime.timedelta(seconds=parseDuration(A.group(1)))
          	B=re.compile('cron\\((.*)\\)').match(s)
          	if B!=None:return None
          	return None
          def log(s):print s
          def getTable(db,name,hashKey,rangeKey=None):
          	G='AttributeType';F='S';E='KeyType';B=hashKey;A='AttributeName'
          	try:
          		C=[{A:B,E:'HASH'}];D=[{A:B,G:F}]
          		if rangeKey!=None:C.append({A:_A,E:'RANGE'});D.append({A:_A,G:F})
          		return db.create_table(TableName=name,KeySchema=C,AttributeDefinitions=D,BillingMode='PAY_PER_REQUEST')
          	except ClientError:return db.Table(name)
          def handler(event,context):
          	p='contexts';o='sortkey';n='enabled';m='~';l='LastEvaluatedKey';a='ALARM ';Z='timeout';Y='Items';X='invocation';W='success';V='state';Q=': ';P='daemonName';O='context';L=' ';K='default';J='pending';H=context;R=boto3.resource('dynamodb');b=boto3.client('sns');c=getTable(R,os.environ['DYNAMO_DATA_TABLE'],P,_A);S=getTable(R,os.environ['DYNAMO_CONFIG_TABLE'],P);d=os.environ['SNS_TOPIC'];I=S.scan();T=I[Y]
          	while l in I:I=S.scan(ExclusiveStartKey=I[l]);T.extend(I[Y])
          	for C in T:
          		if n in C and not C[n]:continue
          		log(C);G=C[P];e=C['minInvocations'];f=parseDuration(C['thresholdStart']);g=parseDuration(C['timeoutEnd']);U=parseLastInvocation(C['schedule']);h=c.query(KeyConditionExpression=Key(P).eq(G)&Key(_A).gte(U.isoformat()));B={}
          		if C[p]:
          			for F in C[p]:B[F]={}
          		else:B[K]={}
          		M=h[Y]
          		for A in M:A[_A]=A[_A].split(m,1)[0];A[o]=A[_A]+m+A[V]
          		M.sort(key=lambda x:x[o])
          		for A in M:
          			if O in A:
          				if not A[O]in B:B[A[O]]={}
          				H=B[A[O]]
          			else:
          				if not K in B:B[K]={}
          				H=B[K]
          			if not A[X]in H:H[A[X]]={W:0,Z:0,J:None}
          			D=H[A[X]];N=datetime.datetime.strptime(A[_A],'%Y-%m-%dT%H:%M:%S')
          			if A[V]=='start':
          				if D[J]==None:
          					if N<=U+datetime.timedelta(seconds=f):D[J]=N
          				else:D[Z]+=1
          			if A[V]=='stop'and D[J]!=None:
          				if N<=D[J]+datetime.timedelta(seconds=g):D[W]+=1
          				else:D[Z]+=1
          				D[J]=None
          		for (i,j) in B.items():
          			E=0
          			for (q,k) in j.items():E+=k[W]
          			B[i]=E
          		if not B:B[K]=0
          		for (F,E) in B.items():
          			log(G+L+F+Q+str(E))
          			if E<e:log(a+G+L+F+Q+str(E));b.publish(TopicArn=d,Message=json.dumps({'AlarmName':G+L+F,'OldStateValue':'UNKNOWN','NewStateValue':'ALARM','NewStateReason':a+G+L+F+Q+str(E)}),Subject=a+G+L+F+Q+str(E))
      Environment:
        Variables:
          DYNAMO_DATA_TABLE: !Ref DynamoDataTable
          DYNAMO_CONFIG_TABLE: !Ref DynamoConfigTable
          SNS_TOPIC: !Ref AlarmSNSTopic
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 60

  ScheduledLambdaEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Id: IdScheduledLambda
          Arn: !GetAtt LambdaFunction.Arn

  ScheduledLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ScheduledLambdaEventRule
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledLambdaEventRule.Arn
